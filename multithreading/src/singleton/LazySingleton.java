package singleton;

public class LazySingleton {
    private static volatile LazySingleton instance;

    private LazySingleton() {
    }

    public static synchronized LazySingleton getInstance() {
        if (instance == null) {
            synchronized (LazySingleton.class) {
                if (instance == null) {
                    instance = new LazySingleton();
                }
            }
        }
        return instance;
    }
}

/*
Ленивая или отложенная инициализация - это прием в программировании, когда ресурсоемкая операция (создание объекта относится к таковой)
выполняется по требованию, а не заранее. Раняя инициализация приводит к тому, что объекты создаются даже если их не использует пользователь,
что может приводить к утечке памяти.
Существуют разные варианты синглтонов, в основном используеются с ленивой инициализацией по приведенным выше причинам.
Среди синглтонов с ранней закгрузкой стоит выделить синглтон через перечисление, кроме неленивой инициализации не имеет недостатков.
Ленивые синглтоны:
Synchronized Accessor имеет меньшую производительность (synchronized метод) при создании и каждом обращении.
Double Checked Locking & volatile, за счет двойной проверки синхронизирует только блок во время создания синглтона
Bill Pugh Singleton - довольно широко используемая реализация синглтона. Сам синглтон описывается в статическом вложенном классе,
поэтому создается только при обращении к методу getInstance(), потокобезопасный.
 */
